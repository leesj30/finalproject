{
    "XSS": {
        "대응방안(서버측)": [
            "입력 값 검증 및 필터링: 사용자의 입력 값을 화이트 리스트 혹은 정규표현식을 이용하여 문자나 패턴을 허용하도록 입력을 제한합니다.",
            "HTML Encoding: 사용자가 입력한 값을 HTML 인코딩으로 스크립트로 실행되는 것을 방지합니다."
        ],
        "대응방안(클라이언트 측)": [
            "HTML, Javascript, CSS 등을 활용하여 인코딩 수행: textContent 사용, replace 사용.",
            "공격에 사용되는 <, >, &, \", ' 등 특수 문자를 인코딩하여 스크립트 수행을 방지합니다."
        ],
        "대응방안(웹 브라우저 측)": [
            "CSP(Content Security Policy) 사용: 스크립트와 이벤트 핸들러(onload 등)을 제한합니다.",
            "CSP를 통해 인라인 스크립트에 nonce, hash를 사용하여 특정 스크립트만 허용합니다."
        ],
        "대응방안(PHP)": [
            "PHP의 htmlspecialchars() 함수를 사용하여 사용자 입력을 HTML 엔티티로 변환합니다."
        ]
    },
    "SQL Injection": {
        "대응방안(서버측)": [
            "입력값 검증 및 필터링: SQL 구문에 사용될 수 있는 특수 문자나 예약어 등을 필터링. 정규 표현식을 사용하여 특정 패턴, 문자를 필터링"
        ],
        "대응방안(PHP)": [
            "Prepared Statements 및 PDO (PHP Data Objects) 사용"
        ],
        "대응방안(Python)": [
            "ORM (Object-Relational Mapping) 을 사용하여 SQL 쿼리를 작성."
        ],
        "대응방안(Java)": [
            "JDBC 및 Prepared Statements : JdbcTemplate를 사용하여 SQL 쿼리를 작성"
        ]
    },
    "Directory Indexing": {
        "대응방안": [
            "디렉토리 인덱싱 비활성화",
            "Apache: options -Indexes : 이 설정을 ‘.htaccess’ 파일이나 Apache 설정 파일에 추가하여 디렉토리 인덱싱을 비활성화",
            "Nginx: autoindex off; : 이 설정을 Nginx 설정 파일에 추가하여 디렉토리 인덱싱을 비활성",
            "적절한 인덱스 파일 사용: 각 디렉토리에 ‘index.html’, ‘index.php’ 등과 같은 인덱스 파일을 생성하여 디렉토리 목록 대신 해당 파일이 로드되도록 함",
            "접근 제어: 디렉토리와 파일에 적절한 접근 제어를 설정. 인증된 사용자만 접근 가능하도록 함",
            "Apache: <Directory \"/path/to/directory\">\nRequire all denied\n</Directory>",
            "Nginx: location /path/to/directory {\ndeny all;\n}",
            "파일 권한 설정: 서버의 파일과 디렉토리에 적절한 권한을 설정. 불필요한 읽기 및 쓰기 권한을 제한",
            "Linux: chmod -R 750 /path/to/directory\nchown -R user:group /path/to/directory"
        ]
    },
    "File Upload": {
        "대응방안": [
            "파일 형식 제한 및 검증: 업로드된 파일의 MIME 타입과 확장자를 검증하여 허용된 형식만 업로드할 수 있도록 제한",
            "파일 크기 제한: 업로드 가능한 파일의 최대 크기를 설정하여 대용량 파일의 업로드를 제한",
            "파일명 검증 및 변경: 업로드된 파일의 이름을 검증하고 안전하지 않은 파일명일 시, 업로드 제한",
            "파일 저장 위치 제한: 업로드된 파일을 웹 서버의 실행 가능한 디렉토리에서 분리된 안전한 위치에 저장",
            "적절한 권한 설정: 업로드된 파일 및 디렉토리에 적절한 권한을 설정, 불필요한 접근을 제한",
            "파일 내용 검사(바이러스 스캔): 파일의 내용을 검사하여 악성 코드나 예상치 못한 데이터를 포함하지 않도록 함.",
            "ClamAV 사용 예시: clamscan /path/to/uploaded/file",
            "보안 헤더 설정(XSS 관련): 파일 다운로드 시 보안 헤더를 설정하여 XSS 공격을 방지",
            "SSL/TLS 사용: 데이터 전송 암호화"
        ]
    },
    "File Download": {
        "대응방안": [
            "경로 검증 및 제한: 다운로드 요청이 허용된 디렉토리 내에서만 이루어지도록 경로를 검증",
            "절대 경로 사용: 상대 경로 대신 절대 경로를 사용하여 파일을 참조하고, 디렉토리 트래버설 공격을 방지",
            "파일 접근 제어: 파일을 다운로드하기 전에 사용자가 해당 파일에 접근할 수 있는 권한이 있는지 검증",
            "MIME 타입 설정: 파일 다운로드 시 올바른 MIME 타입을 설정하여 브라우저가 파일을 적절히 처리하도록 함",
            "파일명 검증 및 변경: 업로드된 파일의 이름을 검증하고, 안전하지 않은 파일명일 시, 다운로드 제한",
            "SSL/TLS 사용: 데이터 전송 암호화",
            "보안 헤더 설정(XSS 관련): 파일 다운로드 시 보안 헤더를 설정하여 XSS 공격을 방지"
        ]
    },
    "Information Disclosure": {
        "대응방안": [
            "웹사이트 오류 페이지 설정: http.conf 설정",
            "웹 서버에서 에러페이지 설정 시 별도의 에러페이지 출력되도록 설정 및 상태코드(에러형태)가 아닌 200이 되도록 URL 형태로 설정한다",
            "웹사이트 오류 페이지 설정 (Apache 버전 노출되는 경우): httpd.conf 파일의 ServerTokens 값 추가 또는 변경",
            "ServerTokens Prod\nServerSignature Off",
            "웹사이트 오류 페이지 설정 (Apache-Coyte/1.1이 노출되는 경우): server.xml 파일 HTTP 커넥터에 ‘Server’ 속성 추가",
            "<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" server=\"MyServer\">",
            "웹사이트 오류 페이지 설정 (php.ini 설정): PHP의 버전 정보가 헤더를 통해 노출되지 않도록 php.ini 파일에서 expose_php 설정을 변경합니다.",
            "expose_php = Off",
            "웹사이트 오류 페이지 설정 (X-Powered-By 헤더 방지): standalone.xml 또는 domain.xml 파일에서 설정을 추가한다",
            "<configuration>\n<jsp-configuration x-powered-by=\"false\"/>\n</configuration>"
        ]
    },
    "Weak Password": {
        "대응방안": [
            "충분한 길이: 비밀번호 생성 시 최소 12자 이상의 암호를 사용하여 만들도록 설계한다",
            "다양한 문자 사용: 대문자, 소문자, 숫자, 특수문자를 혼합하여 암호를 생성하도록 설계한다",
            "사전 단어 피하기: 사전에 있는 단어나 일반적인 구문을 사용하지 못하도록 설계한다",
            "패스프레이즈 사용: 패스프레이즈를 자체적으로 생성해준다"
        ]
    },
    "Location Exposure": {
        "대응방안": [
            "URL에 위치 정보 포함 방지: 위치 정보를 URL에 포함하지 않고, 세션 또는 POST 요청을 통해 전달한다.",
            "위치 정보를 세션에 저장\nsession.setAttribute(\"latitude\", 37.7749);\nsession.setAttribute(\"longitude\", -122.4194);",
            "세션을 통해 위치 정보를 읽고 처리\ndouble latitude = (Double) session.getAttribute(\"latitude\");\ndouble longitude = (Double) session.getAttribute(\"longitude\");",
            "로그 파일에 위치 정보 포함 방지: 로그 파일에 위치 정보를 기록하지 않거나, 마스킹 처리한다.",
            "오류 메시지에 위치 정보 포함 방지: 오류 메시지에 위치 정보가 포함되지 않도록 한다",
            "API 응답에 위치 정보 포함 방지: API 응답에서 위치 정보가 노출되지 않도록 한다"
        ]
    }
}
